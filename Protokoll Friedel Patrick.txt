Protokoll MCTG
Patrick Friedel (if20b087)
Gitlink: https://github.com/patfried/Monster-Card-Game


Programmverlauf:
[Register/Login]
Ein User wird erstellt,dabei wird der username und das passwort eingegeben.
Es wird zuerst überprüft ob sich nicht schon ein User mit gleichem usernamen in der Datenbank befindet.
Wenn das nicht der Fall ist wird der User erstellt. Bei der erstellung werden dem user 20 coins gegeben und die statistikwerte mit 0 initialisiert.
Cardstack und Battledeck werden als leere listen angelegt;
Falls der user jedoch schon vorhanden ist werden die zugehörigen Daten aus der Datenbank ausgelesen.

[Packs kaufen | Stack erstellen | Stack in Datenbank einfügen]
Damit der User kämpfen kann muss er mit seinen Coins Boosterpacks kaufen die jeweils 5 random erstellte Karten enthalten.
Es gibt Monsterkarten und Zauberkarten. Beim öffnen der Boosterpacks werden die erstellten Karten direkt in den Stack des Users eingefügt.
Danach wird der Stack in die Datenbank, in die Tabelle stack eingefügt. Als key wir der username zu jedem Eintrag hinzugefügt.

[Battledeck erstellen und in Datenbank einfügen]
Beim erstellen des Battledecks wird zuerst der Stack aus der Datenbank ausgelesen und danach 5 Karten rausgenommen die dann das Battledeck darstellen.
Dieses Battledeck wird dann in die Datanbank geschrieben.

[Kämpfen | Scoreboard updaten]
Beim Kämpfen werden die Daten und Decks aus der Datenbank geladen.
Ein Kampf geht maximal 100 Runden lang oder endet sobald ein Spieler keine Karten mehr hat.
Am Anfang werden jeweils eine Karte random aus dem Battledeck der Spieler entnommen.
Dann wird abgefragt um welchen art von Kampf es sich handelt. Monser VS Monster, Monster VS Spell oder Spell VS Spell.
Danach werden beide Karten auf spezialfälle geprüft die den Schaden einer Karte verändern.
Die stärkere Karte von den beiden gewinnt und wird in das Deck des Gegners aufgenommen und beim verlierer wird diese aus dem Battledeck gelöscht.
Das Battledeck das während dem Spiel benutzt wird ist eine kopie des Orginaldecks damit werden die karten nur innerhalb eines Kampfes getauscht und manipuliert
nach dem Ende eines Kampfes haben die Spieler Ihre Karten also wieder im Battledeck und könnten damit weiterspielen.
Sobald ein Speil vorbei ist werden die statistischen Werte vom Gewinner und Verlierer geändert und in die Datenbank geschrieben.
Im falle eines Draws ändern sich keine statistischen Werte.
Ganz zum schluss wird aus den statistischen Werten der User das Scoreboard erstellt und ausgegeben.

[Userfunktionen]

Der User kann mithilfe der updateUser() Funktion sein Profil updaten. Diese funktion wird auch nach jeder änderung der Userwerte benutzt um die neuen Werte in die Datenbank 
zu schreiben.
Desweiteren gibt es eine deleteUser() Funktion die den User aus der Spieler Tabelle löscht.




Was habe ich dabei gelernt?

In diesem Projekt habe ich gelernt wie man in C# einen Server erstellt, HTTP Routen legt und wie man benötigte Datan in einer Datenbank persistiert.
Das beispiel war für mich sehr fordernd, vorallem sich das verständnis anzueignen wie Routen funktionieren war eine Herausforderung.
Desto länger man sich mit diesen Themen auseinandergesetzt hat desto mehr hat man dann die funktionen verstanden.


[Unittests]

Bei den Unittests habe ich zuerst die verschiedenen Spezialfälle der einzelnen Karten behandelt.
Danach kammen die Tests wenn ein Monster gegen einen Spell oder ein Spell gegen einen Spell kämpft.
Die Userfunktionen create(), delete() und update() waren die nächsten wichtigen Funktionen in Project.
Zum schluss wurden die verschiedenen Battle ergebnise getestet (Draw, Palyer 1 win, Player2 win).


Beschreibung einzigartiges Feature:

User können den Account löschen.

5 zusätzliche Specialfälle in den Kampf eingebaut:

WaterOrk and WaterTrolls are friends so they dont fight against each other 
Goblins are smart and swift so they make double damage against the kraken 
FireKnights are well armored so the dragons make half damage
Water_Elves are immune to WaterCards
Trolls are immune to the Attacks of the Wizzard



Benötigte Zeit: 45 Stunden